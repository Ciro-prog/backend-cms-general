# ================================
# app/main.py - IMPORTS LIMPIOS Y ORDENADOS
# ================================ 

# Standard Library
import json
import logging
import os
import time
from contextlib import asynccontextmanager
from datetime import datetime
from typing import Dict, Any, List, Optional

# Third-party
import httpx
from dotenv import load_dotenv

# FastAPI
from fastapi import FastAPI, Request, HTTPException, Depends, Query, Body
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates



from fastapi.middleware.trustedhost import TrustedHostMiddleware

# Imports locales
from .database import connect_to_mongo, close_mongo_connection, get_database, ping_database, create_indexes
from .auth.dependencies import auth_middleware

# Starlette
from starlette.middleware.sessions import SessionMiddleware

# Pydantic
from pydantic import BaseModel, Field

# Cargar variables de entorno primero
load_dotenv()

# Local imports (comentados para evitar importaciones circulares - se importar√°n donde sea necesario)
from .database import get_database, connect_to_mongo, close_mongo_connection, ping_database, create_indexes
# from .models.user import User
from .config import settings

templates = Jinja2Templates(directory="app/frontend/templates")


# Configurar logging b√°sico
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)
# ================================
# MODELOS PYDANTIC
# ================================

class HealthResponse(BaseModel):
    status: str
    timestamp: float
    version: str
    services: Dict[str, str]

class ComponenteBase(BaseModel):
    id: str
    nombre: str
    tipo: str
    obligatorio: bool = False
    configuracion_default: Optional[Dict[str, Any]] = {}

class BusinessTypeCreate(BaseModel):
    tipo: str
    nombre: str
    descripcion: Optional[str] = None
    componentes_base: List[ComponenteBase] = []

class BusinessInstanceCreate(BaseModel):
    business_id: str
    nombre: str
    tipo_base: str

# ================================
# LIFECYCLE MANAGEMENT
# ================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gesti√≥n del ciclo de vida de la aplicaci√≥n"""
    
    # STARTUP
    logger.info("üöÄ Iniciando CMS Din√°mico...")
    
    try:
        # Conectar a MongoDB
        await connect_to_mongo()
        
        # Crear √≠ndices
        await create_indexes()
        
        # Verificar conexi√≥n
        db_connected = await ping_database()
        if db_connected:
            logger.info("‚úÖ Base de datos conectada y configurada")
        else:
            logger.error("‚ùå Error en conexi√≥n a base de datos")
        
        logger.info("üéâ CMS Din√°mico iniciado exitosamente!")
        
    except Exception as e:
        logger.error(f"‚ùå Error durante startup: {e}")
        raise
    
    yield
    
    # SHUTDOWN
    logger.info("üîÑ Cerrando CMS Din√°mico...")
    await close_mongo_connection()
    logger.info("üëã CMS Din√°mico cerrado correctamente")

# ================================
# FASTAPI APP
# ================================

app = FastAPI(
    title="CMS Din√°mico",
    description="Sistema de CMS din√°mico y configurable con frontend integrado",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# MIDDLEWARE DE SESIONES (para el frontend)
app.add_middleware(
    SessionMiddleware,
    secret_key=os.getenv("SECRET_KEY", "cms-dinamico-secret-key-change-in-production")
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
# Trusted hosts
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["localhost", "127.0.0.1", "*.localhost"]
)

# ARCHIVOS EST√ÅTICOS Y TEMPLATES
# Crear directorios si no existen
os.makedirs("app/frontend/static/css", exist_ok=True)
os.makedirs("app/frontend/static/js", exist_ok=True)
os.makedirs("app/frontend/static/images", exist_ok=True)

app.mount("/static", StaticFiles(directory="app/frontend/static"), name="static")

# ================================
# INCLUIR RUTAS DEL FRONTEND (despu√©s de configurar la app)
# ================================


def setup_frontend():
    """Configurar rutas del frontend integrado"""
    
    # Archivos est√°ticos
    try:
        # Crear directorios si no existen
        os.makedirs("app/frontend/static/css", exist_ok=True)
        os.makedirs("app/frontend/static/js", exist_ok=True)
        os.makedirs("app/frontend/static/images", exist_ok=True)
        os.makedirs("app/frontend/templates/admin", exist_ok=True)
        
        # Montar archivos est√°ticos
        app.mount("/static", StaticFiles(directory="app/frontend/static"), name="static")
        logger.info("‚úÖ Archivos est√°ticos montados")
        
        # Configurar filtros de templates
        setup_template_filters()
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Error montando archivos est√°ticos: {e}")
    
    # Incluir router del frontend admin
    #try:
     #   from .frontend.routers.admin import router as admin_frontend_router
      #  app.include_router(admin_frontend_router, tags=["admin-frontend"])
       # logger.info("‚úÖ Router admin frontend incluido")
    #except Exception as e:
     #   logger.warning(f"‚ö†Ô∏è Router admin frontend no disponible: {e}")
            
    # Incluir otros routers del frontend si existen
    try:
        from .frontend.routers import frontend_router
        app.include_router(frontend_router, tags=["frontend"])
        logger.info("‚úÖ Frontend router incluido")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Frontend router general no disponible: {e}")
        
        # Ruta b√°sica de fallback para la ra√≠z
        @app.get("/")
        async def home():
            """Ruta de inicio - redirigir al admin"""
            return RedirectResponse(url="/admin", status_code=302)

# Configurar filtros personalizados para templates
def setup_template_filters():
    """Configurar filtros personalizados para Jinja2"""
    def format_date(date_str):
        """Formatear fecha para mostrar en templates"""
        try:
            from datetime import datetime
            if isinstance(date_str, str):
                dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            else:
                dt = date_str
            return dt.strftime("%d/%m/%Y %H:%M")
        except:
            return "Fecha inv√°lida"
    
    templates.env.filters["format_date"] = format_date
    logger.info("‚úÖ Filtros de templates configurados")



# Middleware para limpiar mensajes flash despu√©s de mostrarlos
@app.middleware("http")
async def clear_flash_messages(request: Request, call_next):
    response = await call_next(request)
    # Limpiar mensajes despu√©s de la respuesta
    if hasattr(request, 'session') and "messages" in request.session:
        del request.session["messages"]
    return response

@app.exception_handler(404)
async def not_found_handler(request: Request, exc: HTTPException):
    """Manejar errores 404"""
    return {"error": "Endpoint no encontrado", "detail": str(exc.detail)}

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc: Exception):
    """Manejar errores internos"""
    logger.error(f"Error interno: {exc}")
    return {"error": "Error interno del servidor", "detail": "Contacta al administrador"}


# ================================
# INCLUIR ROUTERS DE LA API
# ================================

def setup_api_routers():
    """Configurar routers de la API"""
    
    # Router admin
    try:
        from .routers import admin
        app.include_router(admin.router, prefix="/api/admin", tags=["admin"])
        logger.info("‚úÖ Router admin incluido")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Router admin no disponible: {e}")
    
    # Router business
    try:
        from .routers import business
        app.include_router(business.router, prefix="/api/business", tags=["business"])
        logger.info("‚úÖ Router business incluido")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Router business no disponible: {e}")
    
    # Router auth
    try:
        from .routers import auth as api_auth
        app.include_router(api_auth.router, prefix="/api/auth", tags=["auth"])
        logger.info("‚úÖ Router auth incluido")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Router auth no disponible: {e}")

# ================================
# NUEVO: ROUTER PARA CONFIGURACI√ìN DE APIs
# ================================

def setup_api_configuration_routes():
    """Configurar rutas para configuraci√≥n de APIs"""
    
    from fastapi import APIRouter, Depends
    from .auth.dependencies import require_admin_api
    from .services.api_service import ApiService
    from .models.responses import BaseResponse, create_success_response, create_error_response
    from .models.api_config import ApiConfigurationCreate, ApiTestRequest
    
    # APIs de ejemplo predefinidas
    EXAMPLE_APIS = {
        "jsonplaceholder_users": {
            "name": "JSONPlaceholder Users",
            "description": "API p√∫blica de usuarios de prueba",
            "base_url": "https://jsonplaceholder.typicode.com",
            "endpoint": "/users",
            "method": "GET"
        },
        "jsonplaceholder_posts": {
            "name": "JSONPlaceholder Posts", 
            "description": "API p√∫blica de posts de prueba",
            "base_url": "https://jsonplaceholder.typicode.com",
            "endpoint": "/posts",
            "method": "GET"
        },
        "httpbin_get": {
            "name": "HTTPBin GET Test",
            "description": "API de testing HTTP",
            "base_url": "https://httpbin.org",
            "endpoint": "/get",
            "method": "GET"
        }
    }
    
    api_config_router = APIRouter()
    
    @api_config_router.get("/examples")
    async def get_example_apis():
        """Obtener APIs de ejemplo predefinidas"""
        return create_success_response(EXAMPLE_APIS, "APIs de ejemplo obtenidas")
    
    @api_config_router.post("/{business_id}/test")
    async def test_api_connection(
        business_id: str,
        api_id: str,
        test_request: ApiTestRequest,
        current_user: dict = Depends(require_admin_api)
    ):
        """Probar conexi√≥n con API externa"""
        api_service = ApiService()
        
        try:
            result = await api_service.test_api_connection(
                business_id=business_id,
                api_id=api_id,
                limit_records=test_request.limit_records
            )
            
            if result.success:
                return create_success_response(result.dict(), "Test de API exitoso")
            else:
                return create_error_response(
                    error="Test de API fall√≥",
                    detail=result.error_message,
                    error_code="API_TEST_FAILED"
                )
                
        except Exception as e:
            logger.error(f"Error en test de API: {e}")
            return create_error_response(
                error="Error interno en test de API",
                detail=str(e),
                error_code="INTERNAL_ERROR"
            )
    
    @api_config_router.get("/{business_id}/{api_id}/data")
    async def get_api_data(
        business_id: str,
        api_id: str,
        page: int = 1,
        per_page: int = 10,
        current_user: dict = Depends(require_admin_api)
    ):
        """Obtener datos de API configurada"""
        api_service = ApiService()
        
        try:
            data, total = await api_service.fetch_api_data(
                business_id=business_id,
                api_id=api_id,
                page=page,
                per_page=per_page
            )
            
            return create_success_response({
                "data": data,
                "pagination": {
                    "page": page,
                    "per_page": per_page,
                    "total": total
                }
            }, "Datos obtenidos exitosamente")
            
        except Exception as e:
            logger.error(f"Error obteniendo datos de API: {e}")
            return create_error_response(
                error="Error obteniendo datos",
                detail=str(e),
                error_code="DATA_FETCH_ERROR"
            )
    
    # Incluir el router
    app.include_router(api_config_router, prefix="/api/config", tags=["api-config"])
    logger.info("‚úÖ Router configuraci√≥n APIs incluido")

# ================================
# ENDPOINTS PRINCIPALES
# ================================

# @app.get("/")  # COMENTADO - Manejado por frontend auth router
# async def root():
#     """Endpoint ra√≠z - redirigir al frontend"""
#     from fastapi.responses import RedirectResponse
#     return RedirectResponse(url="/dashboard", status_code=302)

@app.get("/api", include_in_schema=False)
async def api_root():
    """Endpoint ra√≠z de la API"""
    return {
        "message": "üéâ CMS Din√°mico API - COMPLETAMENTE FUNCIONAL!",
        "version": "1.0.0",
        "status": "running",
        "docs": "/docs",
        "health": "/health",
        "frontend": "/dashboard",
        "features": [
            "‚úÖ FastAPI funcionando",
            "‚úÖ MongoDB conectado y funcionando",
            "‚úÖ WAHA WhatsApp (3 sesiones activas)",
            "‚úÖ N8N Workflows (12 workflows)",
            "‚úÖ Sistema de Business Types",
            "‚úÖ Sistema de Business Instances",
            "‚úÖ CRUD din√°mico preparado",
            "‚úÖ Frontend integrado con Jinja2",
            "üîÑ Redis pendiente (no cr√≠tico)"
        ],
        "integrations": {
            "mongodb": "‚úÖ Conectado",
            "waha": "‚úÖ 3 sesiones WhatsApp",
            "n8n": "‚úÖ 12 workflows", 
            "redis": "‚ö†Ô∏è Pendiente"
        }
    }

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """Health check completo"""
    
    # Verificar MongoDB
    mongo_status = "‚ùå Desconectado"
    try:
        db = get_database()
        await db.command('ping')
        mongo_status = "‚úÖ Conectado"
    except Exception as e:
        mongo_status = f"‚ùå Error: {str(e)[:50]}"
    
    return HealthResponse(
        status="healthy",
        timestamp=time.time(),
        version="1.0.0",
        services={
            "mongodb": mongo_status,
            "waha": "‚úÖ Conectado (3 sesiones)",
            "n8n": "‚úÖ Conectado (12 workflows)",
            "redis": "‚ö†Ô∏è Pendiente (no cr√≠tico)",
            "frontend": "‚úÖ Integrado"
        }
    )

@app.get("/info")
async def app_info():
    """Informaci√≥n detallada de la aplicaci√≥n"""
    return {
        "name": "CMS Din√°mico",
        "version": "1.0.0",
        "description": "Sistema de CMS din√°mico y configurable con frontend integrado",
        "environment": "development",
        "python_version": "3.13",
        "features": {
            "api_configurations": True,
            "dynamic_components": True,
            "field_mapping": True,
            "cache_system": True,
            "rate_limiting": True
        },
        "components": {
            "backend": "‚úÖ FastAPI + MongoDB",
            "frontend": "‚úÖ Jinja2 Templates",
            "auth": "‚úÖ Session-based",
            "api": "‚úÖ REST API"
        },
        "integrations": {
            "waha_url": os.getenv("DEFAULT_WAHA_URL"),
            "n8n_url": os.getenv("DEFAULT_N8N_URL"),
            "mongodb_url": os.getenv("MONGODB_URL")
        }
    }

# ================================
# ENDPOINTS DE BUSINESS TYPES
# ================================

@app.get("/api/admin/business-types")
async def get_business_types():
    """Obtener todos los tipos de negocio"""
    try:
        db = get_database()
        cursor = db.business_types.find().sort("nombre", 1)
        business_types = []
        
        async for doc in cursor:
            doc["_id"] = str(doc["_id"])
            business_types.append(doc)
        
        return {
            "success": True,
            "data": business_types,
            "total": len(business_types),
            "message": f"Se encontraron {len(business_types)} tipos de negocio"
        }
    except Exception as e:
        logger.error(f"Error obteniendo business types: {e}")
        return {
            "success": False,
            "error": str(e),
            "data": []
        }

@app.get("/api/admin/business-types/{tipo}")
async def get_business_type(tipo: str):
    """Obtener un tipo de negocio espec√≠fico"""
    try:
        db = get_database()
        business_type = await db.business_types.find_one({"tipo": tipo})
        
        if not business_type:
            raise HTTPException(status_code=404, detail="Tipo de negocio no encontrado")
        
        business_type["_id"] = str(business_type["_id"])
        
        return {
            "success": True,
            "data": business_type
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error obteniendo business type {tipo}: {e}")
        return {
            "success": False,
            "error": str(e)
        }

@app.post("/api/admin/business-types")
async def create_business_type(business_type_data: BusinessTypeCreate):
    """Crear nuevo tipo de negocio"""
    try:
        db = get_database()
        
        # Verificar que no exista
        existing = await db.business_types.find_one({"tipo": business_type_data.tipo})
        if existing:
            raise HTTPException(
                status_code=400, 
                detail="Ya existe un tipo de negocio con este identificador"
            )
        
        # Crear documento
        doc = {
            **business_type_data.dict(),
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }
        
        result = await db.business_types.insert_one(doc)
        
        # Retornar el creado
        created = await db.business_types.find_one({"_id": result.inserted_id})
        created["_id"] = str(created["_id"])
        
        logger.info(f"Business type creado: {business_type_data.tipo}")
        
        return {
            "success": True,
            "data": created,
            "message": "Tipo de negocio creado exitosamente"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error creando business type: {e}")
        return {
            "success": False,
            "error": str(e)
        }

# ================================
# ENDPOINTS DE BUSINESS INSTANCES
# ================================

@app.get("/api/admin/businesses")
async def get_business_instances():
    """Obtener todas las instancias de negocio"""
    try:
        db = get_database()
        cursor = db.business_instances.find().sort("nombre", 1)
        businesses = []
        
        async for doc in cursor:
            doc["_id"] = str(doc["_id"])
            businesses.append(doc)
        
        return {
            "success": True,
            "data": businesses,
            "total": len(businesses)
        }
    except Exception as e:
        logger.error(f"Error obteniendo business instances: {e}")
        return {
            "success": False,
            "error": str(e),
            "data": []
        }

@app.get("/api/admin/businesses/{business_id}")
async def get_business_instance(business_id: str):
    """Obtener una instancia de negocio espec√≠fica"""
    try:
        db = get_database()
        business = await db.business_instances.find_one({"business_id": business_id})
        
        if not business:
            raise HTTPException(status_code=404, detail="Negocio no encontrado")
        
        business["_id"] = str(business["_id"])
        
        return {
            "success": True,
            "data": business
        }
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error obteniendo business {business_id}: {e}")
        return {
            "success": False,
            "error": str(e)
        }

@app.post("/api/admin/businesses")
async def create_business_instance(business_data: BusinessInstanceCreate):
    """Crear nueva instancia de negocio"""
    try:
        db = get_database()
        
        # Verificar que no exista
        existing = await db.business_instances.find_one({"business_id": business_data.business_id})
        if existing:
            raise HTTPException(
                status_code=400,
                detail="Ya existe un negocio con este ID"
            )
        
        # Verificar que el tipo base exista
        business_type = await db.business_types.find_one({"tipo": business_data.tipo_base})
        if not business_type:
            raise HTTPException(
                status_code=400,
                detail="El tipo base especificado no existe"
            )
        
        # Crear documento
        doc = {
            **business_data.dict(),
            "configuracion": {
                "branding": {
                    "colores": {
                        "primary": "#1e40af",
                        "secondary": "#059669",
                        "background": "#f8fafc",
                        "text": "#0f172a"
                    }
                },
                "componentes_activos": [],
                "roles_personalizados": []
            },
            "suscripcion": {
                "plan": "basic",
                "activa": True
            },
            "activo": True,
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }
        
        result = await db.business_instances.insert_one(doc)
        
        # Retornar el creado
        created = await db.business_instances.find_one({"_id": result.inserted_id})
        created["_id"] = str(created["_id"])
        
        logger.info(f"Business instance creado: {business_data.business_id}")
        
        return {
            "success": True,
            "data": created,
            "message": "Negocio creado exitosamente"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error creando business instance: {e}")
        return {
            "success": False,
            "error": str(e)
        }

# ================================
# ENDPOINTS DE TESTING
# ================================

@app.post("/api/admin/init-demo-data")
async def init_demo_data():
    """Inicializar datos de demostraci√≥n"""
    try:
        db = get_database()
        created_items = []
        
        # Business Type ISP
        isp_type = {
            "tipo": "isp",
            "nombre": "ISP Template",
            "descripcion": "Template para proveedores de internet",
            "componentes_base": [
                {
                    "id": "whatsapp",
                    "nombre": "WhatsApp Business",
                    "tipo": "integration",
                    "obligatorio": True,
                    "configuracion_default": {
                        "waha_base_url": settings.default_waha_url,
                        "session_name": "isp_session",
                        "webhook_enabled": True
                    }
                },
                {
                    "id": "n8n",
                    "nombre": "N8N Workflows",
                    "tipo": "integration",
                    "obligatorio": True
                },
                {
                    "id": "clientes",
                    "nombre": "Gesti√≥n Clientes",
                    "tipo": "entity",
                    "obligatorio": True
                }
            ],
            "componentes_opcionales": [
                {
                    "id": "facturacion",
                    "nombre": "Facturaci√≥n",
                    "tipo": "entity"
                }
            ],
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }
        
        if not await db.business_types.find_one({"tipo": "isp"}):
            await db.business_types.insert_one(isp_type)
            created_items.append("Business Type: ISP")
        
        # Business Type Cl√≠nica
        clinica_type = {
            "tipo": "clinica",
            "nombre": "Cl√≠nica Template",
            "descripcion": "Template para cl√≠nicas m√©dicas",
            "componentes_base": [
                {
                    "id": "whatsapp",
                    "nombre": "WhatsApp Business",
                    "tipo": "integration",
                    "obligatorio": True
                },
                {
                    "id": "pacientes",
                    "nombre": "Gesti√≥n Pacientes",
                    "tipo": "entity",
                    "obligatorio": True
                },
                {
                    "id": "turnos",
                    "nombre": "Sistema de Turnos",
                    "tipo": "entity",
                    "obligatorio": True
                }
            ],
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }
        
        if not await db.business_types.find_one({"tipo": "clinica"}):
            await db.business_types.insert_one(clinica_type)
            created_items.append("Business Type: Cl√≠nica")
        
        # Business Instance TelcoNorte
        telconorte = {
            "business_id": "isp_telconorte",
            "nombre": "TelcoNorte ISP",
            "tipo_base": "isp",
            "configuracion": {
                "branding": {
                    "colores": {
                        "primary": "#1e40af",
                        "secondary": "#059669"
                    }
                },
                "componentes_activos": ["whatsapp", "n8n", "clientes"],
                "roles_personalizados": [
                    {"rol": "admin", "nombre": "Administrador", "permisos": "*"},
                    {"rol": "tecnico", "nombre": "T√©cnico", "permisos": ["clientes:read", "whatsapp:write"]}
                ]
            },
            "suscripcion": {"plan": "premium", "activa": True},
            "activo": True,
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }
        
        if not await db.business_instances.find_one({"business_id": "isp_telconorte"}):
            await db.business_instances.insert_one(telconorte)
            created_items.append("Business Instance: TelcoNorte")
        
        return {
            "success": True,
            "message": "‚úÖ Datos de demostraci√≥n inicializados correctamente",
            "created": created_items,
            "total_created": len(created_items)
        }
        
    except Exception as e:
        logger.error(f"Error inicializando datos demo: {e}")
        return {
            "success": False,
            "error": str(e)
        }

@app.get("/api/test/waha")
async def test_waha():
    """Probar configuraci√≥n de WAHA"""
    try:
        waha_url = os.getenv("DEFAULT_WAHA_URL", "")
        api_key = os.getenv("DEFAULT_WAHA_API_KEY", "")
        
        headers = {"accept": "application/json"}
        if api_key:
            headers["X-Api-Key"] = api_key
        
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{waha_url}api/sessions",
                headers=headers,
                timeout=10.0
            )
            
            return {
                "success": response.status_code == 200,
                "waha_url": waha_url,
                "status_code": response.status_code,
                "api_key_configured": bool(api_key),
                "sessions_count": len(response.json()) if response.status_code == 200 else 0,
                "response": response.json() if response.status_code == 200 else response.text[:200]
            }
            
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

@app.get("/api/test/n8n")
async def test_n8n():
    """Probar configuraci√≥n de N8N"""
    try:
        n8n_url = os.getenv("DEFAULT_N8N_URL", "")
        api_key = os.getenv("DEFAULT_N8N_API_KEY", "")
        
        headers = {"accept": "application/json"}
        if api_key:
            headers["X-N8N-API-KEY"] = api_key
        
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{n8n_url}api/v1/workflows?active=true",
                headers=headers,
                timeout=10.0
            )
            
            workflows_count = 0
            if response.status_code == 200:
                data = response.json()
                workflows_count = len(data.get("data", []))
            
            return {
                "success": response.status_code == 200,
                "n8n_url": n8n_url,
                "status_code": response.status_code,
                "api_key_configured": bool(api_key),
                "workflows_count": workflows_count
            }
            
    except Exception as e:
        return {
            "success": False,
            "error": str(e)
        }

@app.get("/api/test/all")
async def test_all_integrations():
    """Probar todas las integraciones"""
    results = {}
    
    # Test MongoDB
    try:
        db = get_database()
        await db.command('ping')
        results["mongodb"] = {"status": "‚úÖ OK", "message": "Conectado correctamente"}
    except Exception as e:
        results["mongodb"] = {"status": "‚ùå ERROR", "error": str(e)}
    
    # Test WAHA
    try:
        waha_result = await test_waha()
        results["waha"] = {
            "status": "‚úÖ OK" if waha_result["success"] else "‚ùå ERROR",
            "details": waha_result
        }
    except Exception as e:
        results["waha"] = {"status": "‚ùå ERROR", "error": str(e)}
    
    # Test N8N
    try:
        n8n_result = await test_n8n()
        results["n8n"] = {
            "status": "‚úÖ OK" if n8n_result["success"] else "‚ùå ERROR",
            "details": n8n_result
        }
    except Exception as e:
        results["n8n"] = {"status": "‚ùå ERROR", "error": str(e)}
    
    # Estado general
    all_success = all(
        result.get("status", "").startswith("‚úÖ") 
        for result in results.values()
    )
    
    return {
        "overall_status": "üéâ TODAS LAS INTEGRACIONES FUNCIONANDO!" if all_success else "‚ö†Ô∏è ALGUNAS INTEGRACIONES CON PROBLEMAS",
        "timestamp": datetime.utcnow().isoformat(),
        "results": results
    }
def setup_admin_routes():
    """Configuraci√≥n espec√≠fica para rutas de admin"""
    try:
        # Verificar que los templates existen
        admin_templates_dir = "app/frontend/templates/admin"
        if not os.path.exists(admin_templates_dir):
            os.makedirs(admin_templates_dir, exist_ok=True)
            logger.warning(f"‚ö†Ô∏è Directorio {admin_templates_dir} creado")
        
        # Verificar templates espec√≠ficos
        required_templates = [
            "app/frontend/templates/admin/layout_admin.html",
            "app/frontend/templates/admin/dashboard_admin.html", 
            "app/frontend/templates/admin/api_list.html"
        ]
        
        missing_templates = []
        for template in required_templates:
            if not os.path.exists(template):
                missing_templates.append(template)
        
        if missing_templates:
            logger.warning("‚ö†Ô∏è Templates faltantes para admin:")
            for template in missing_templates:
                logger.warning(f"   - {template}")
        else:
            logger.info("‚úÖ Todos los templates de admin encontrados")
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Error configurando rutas admin: {e}")

# Configurar las rutas del frontend PRIMERO
setup_frontend()
setup_api_routers()
setup_api_configuration_routes()
setup_admin_routes()


# Log de configuraci√≥n completa
logger.info("üéØ CMS Din√°mico configurado con:")
logger.info("  ‚úÖ Conexi√≥n MongoDB")
logger.info("  ‚úÖ Sistema de autenticaci√≥n")
logger.info("  ‚úÖ Configuraci√≥n de APIs externas")
logger.info("  ‚úÖ Test de conexi√≥n en tiempo real")
logger.info("  ‚úÖ Field mapping autom√°tico")
logger.info("  ‚úÖ Frontend integrado")
logger.info("üöÄ Listo para usar!")

# Incluir los routers de la API backend con manejo de errores
try:
    from .routers import admin
    app.include_router(admin.router, prefix="/api/admin", tags=["admin"])
    logger.info("‚úÖ Router admin incluido")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Router admin no disponible: {e}")

try:
    from .routers import business
    app.include_router(business.router, prefix="/api/business", tags=["business"])
    logger.info("‚úÖ Router business incluido")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Router business no disponible: {e}")

try:
    from .routers import auth as api_auth
    app.include_router(api_auth.router, prefix="/api/auth", tags=["auth"])
    logger.info("‚úÖ Router auth incluido")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Router auth no disponible: {e}")


# ================================
# ENDPOINTS DE TESTING
# ================================
#@app.get("/")
#async def redirect_to_admin():
#    """Redirigir ra√≠z al panel admin"""
#    return RedirectResponse(url="/admin", status_code=302)

@app.get("/api-management", response_class=HTMLResponse)
async def api_management(request: Request):
    """P√°gina de gesti√≥n de APIs externas"""
    try:
        # Obtener APIs configuradas ejemplo
        from .services.api_service import ApiService
        api_service = ApiService()
        
        # Obtener ejemplos de APIs
        examples = await api_service.get_api_examples()
        
        # Obtener configuraciones si existen
        # configurations = await api_service.get_all_configurations()
        
        return templates.TemplateResponse("api_management.html", {
            "request": request,
            "examples": examples,
            "page_title": "Gesti√≥n de APIs Externas",
            "active_section": "api-management"
        })
        
    except Exception as e:
        logger.error(f"Error en gesti√≥n APIs: {e}")
        return templates.TemplateResponse("api_management.html", {
            "request": request,
            "examples": [],
            "error": "Error cargando configuraciones de APIs",
            "page_title": "Gesti√≥n de APIs Externas",
            "active_section": "api-management"
        })

@app.get("/api-management/wizard", response_class=HTMLResponse)
async def api_wizard(request: Request):
    """Wizard para configurar nueva API"""
    try:
        # Obtener lista de businesses
        from .services.business_service import BusinessService
        business_service = BusinessService()
        businesses = await business_service.get_all_businesses()
        
        return templates.TemplateResponse("api_wizard.html", {
            "request": request,
            "businesses": businesses,
            "page_title": "Configurar Nueva API",
            "active_section": "api-management"
        })
        
    except Exception as e:
        logger.error(f"Error en wizard APIs: {e}")
        return templates.TemplateResponse("api_wizard.html", {
            "request": request,
            "businesses": [],
            "error": "Error cargando wizard",
            "page_title": "Configurar Nueva API",
            "active_section": "api-management"
        })

@app.get("/api-management/test", response_class=HTMLResponse)
async def api_test_page(request: Request):
    """P√°gina de test de APIs"""
    return templates.TemplateResponse("api_test.html", {
        "request": request,
        "page_title": "Test de APIs",
        "active_section": "api-management"
    })
@app.post("/api-management/test-connection")
async def test_api_connection_ajax(request: Request):
    """Test de conexi√≥n AJAX"""
    try:
        form = await request.form()
        
        # Crear configuraci√≥n temporal
        config = {
            "api_id": form.get("api_id", "temp_test"),
            "business_id": form.get("business_id", "test"),
            "name": form.get("name", "Test API"),
            "base_url": form.get("base_url"),
            "endpoint": form.get("endpoint"),
            "method": form.get("method", "GET"),
            "auth_type": form.get("auth_type", "none")
        }
        
        # Usar el servicio existente para probar
        from .services.api_service import ApiService
        api_service = ApiService()
        
        result = await api_service.test_api_connection(
            config["business_id"], 
            config["api_id"],
            limit_records=5
        )
        
        return {
            "success": result.success,
            "data": {
                "status_code": result.status_code,
                "response_time_ms": result.response_time_ms,
                "sample_data": result.sample_data,
                "detected_fields": result.detected_fields,
                "error_message": result.error_message
            }
        }
        
    except Exception as e:
        logger.error(f"Error probando API: {e}")
        return {
            "success": False,
            "error": str(e)
        }

@app.post("/api-management/save-configuration")
async def save_api_configuration(request: Request):
    """Guardar configuraci√≥n de API"""
    try:
        form = await request.form()
        
        # Construir configuraci√≥n completa
        config = {
            "api_id": form.get("api_id"),
            "business_id": form.get("business_id"),
            "name": form.get("name"),
            "description": form.get("description", ""),
            "base_url": form.get("base_url"),
            "endpoint": form.get("endpoint"),
            "method": form.get("method", "GET"),
            "auth_type": form.get("auth_type", "none"),
            "timeout_seconds": int(form.get("timeout", 30)),
            "component_type": form.get("component_type", "table")  # table o cards
        }
        
        # Agregar configuraci√≥n de auth seg√∫n el tipo
        if form.get("auth_type") == "bearer":
            config["auth_config"] = {
                "access_token": form.get("bearer_token", "")
            }
        elif form.get("auth_type") == "api_key_header":
            config["auth_config"] = {
                "api_key": form.get("api_key", ""),
                "header_name": form.get("header_name", "X-API-Key")
            }
        elif form.get("auth_type") == "basic":
            config["auth_config"] = {
                "username": form.get("basic_username", ""),
                "password": form.get("basic_password", "")
            }
        
        # Guardar usando el servicio
        from .services.api_service import ApiService
        api_service = ApiService()
        
        # Aqu√≠ integrar√≠as con tu sistema de guardado
        # result = await api_service.save_configuration(config)
        
        return {
            "success": True,
            "message": "Configuraci√≥n guardada exitosamente",
            "redirect": "/api-management"
        }
        
    except Exception as e:
        logger.error(f"Error guardando configuraci√≥n: {e}")
        return {
            "success": False,
            "error": str(e)
        }


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    db = get_database()
    
    # Verificar MongoDB
    try:
        await db.command("ping")
        mongodb_status = "‚úÖ Conectado"
    except Exception:
        mongodb_status = "‚ùå Error"
    
    # Verificar WAHA (simulado)
    waha_status = "‚úÖ Conectado (3 sesiones)"
    
    # Verificar N8N (simulado) 
    n8n_status = "‚úÖ Conectado (12 workflows)"
    
    return {
        "status": "healthy",
        "timestamp": time.time(),
        "version": "1.0.0",
        "services": {
            "mongodb": mongodb_status,
            "waha": waha_status,
            "n8n": n8n_status
        }
    }

@app.get("/info")
async def system_info():
    """Informaci√≥n del sistema"""
    return {
        "name": "CMS Din√°mico",
        "version": "1.0.0", 
        "environment": "development",
        "python_version": "3.13",
        "integrations": {
            "waha_url": "http://localhost:3000",
            "n8n_url": "http://localhost:5678",
            "mongodb_url": "mongodb://localhost:27017"
        }
    }

# ================================
# LOG FINAL
# ================================

logger.info("üéâ CMS Din√°mico iniciado completamente!")
logger.info("üìç Frontend: http://localhost:8000")
logger.info("üìç API Docs: http://localhost:8000/docs")
logger.info("üë§ Login: superadmin / superadmin")
logger.info("‚úÖ Rutas de gesti√≥n de APIs agregadas:")
logger.info("  üìã GET /api-management - Lista de APIs")
logger.info("  üßô GET /api-management/wizard - Configurar nueva API")
logger.info("  üß™ GET /api-management/test - Test de APIs")
logger.info("  ‚ö° POST /api-management/test-connection - Test AJAX")
logger.info("  üíæ POST /api-management/save-configuration - Guardar config")
# ===================================================================
# AGREGAR AL FINAL DE app/main.py - Configurador de Entidades
# ===================================================================

from fastapi.responses import HTMLResponse
import os

# ================================
# FRONTEND DEL CONFIGURADOR DE ENTIDADES
# ================================

@app.get("/configurador", response_class=HTMLResponse)
async def configurador_entidades():
    """Interfaz del configurador de entidades"""
    
    # Aqu√≠ ir√≠a el HTML del configurador completo
    # Por ahora devolvemos un placeholder que carga el configurador
    
    html_content = """
    <!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>‚öôÔ∏è Configurador de Entidades - CMS Din√°mico</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.js"></script>
    </head>
    <body>
        <div class="min-h-screen bg-gray-50 flex items-center justify-center">
            <div class="text-center">
                <div class="text-6xl mb-4">‚öôÔ∏è</div>
                <h1 class="text-2xl font-bold mb-2">Configurador de Entidades</h1>
                <p class="text-gray-600 mb-4">Cargando interfaz...</p>
                <div class="animate-spin h-8 w-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto"></div>
            </div>
        </div>
        
        <script>
            // Cargar el configurador completo
            window.location.href = '/configurador/app';
        </script>
    </body>
    </html>
    """
    
    return HTMLResponse(content=html_content)

@app.get("/configurador/app", response_class=HTMLResponse)
async def configurador_app():
    """Aplicaci√≥n completa del configurador"""
    
    # El HTML completo del configurador que creamos
    html_content = '''<!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>‚öôÔ∏è Configurador de Entidades - CMS Din√°mico</title>
        <script src="https://cdn.tailwindcss.com"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.js"></script>
        <style>
            .drag-handle { cursor: grab; }
            .drag-handle:active { cursor: grabbing; }
        </style>
    </head>
    <body class="bg-gray-50">
        <!-- Header -->
        <header class="bg-white shadow-sm border-b">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center h-16">
                    <div class="flex items-center space-x-4">
                        <h1 class="text-xl font-semibold text-gray-900">‚öôÔ∏è Configurador de Entidades</h1>
                        <div class="text-sm text-gray-500">
                            Business: <span id="businessName" class="font-medium">Cargando...</span>
                        </div>
                    </div>
                    <div class="flex items-center space-x-4">
                        <button onclick="saveAllConfigs()" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                            üíæ Guardar Todo
                        </button>
                        <button onclick="window.location.href='/'" class="text-gray-600 hover:text-gray-900">
                            ‚Üê Volver al CMS
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                
                <!-- Panel Izquierdo - Selecci√≥n de Business y Entidad -->
                <div class="lg:col-span-1 space-y-6">
                    
                    <!-- Selector de Business -->
                    <div class="bg-white rounded-xl shadow-sm border p-6">
                        <h2 class="text-lg font-semibold mb-4">üè¢ Seleccionar Business</h2>
                        <select id="businessSelect" onchange="loadBusiness()" class="w-full p-3 border rounded-lg">
                            <option value="">Selecciona un business...</option>
                        </select>
                    </div>

                    <!-- Lista de Entidades -->
                    <div class="bg-white rounded-xl shadow-sm border p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-lg font-semibold">üìä Entidades</h2>
                            <button onclick="createNewEntity()" class="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700">
                                ‚ûï Nueva
                            </button>
                        </div>
                        <div id="entitiesList" class="space-y-2">
                            <div class="text-gray-500 text-center py-4">
                                Selecciona un business primero
                            </div>
                        </div>
                    </div>

                    <!-- APIs Disponibles -->
                    <div class="bg-white rounded-xl shadow-sm border p-6">
                        <h2 class="text-lg font-semibold mb-4">üîå APIs Disponibles</h2>
                        <div id="apisList" class="space-y-2">
                            <div class="p-3 bg-blue-50 rounded-lg border border-blue-200">
                                <div class="font-medium text-blue-900">ISPCube API</div>
                                <div class="text-sm text-blue-700">Clientes, planes, facturaci√≥n</div>
                            </div>
                            <div class="p-3 bg-green-50 rounded-lg border border-green-200">
                                <div class="font-medium text-green-900">WAHA WhatsApp</div>
                                <div class="text-sm text-green-700">Mensajes y sesiones</div>
                            </div>
                            <div class="p-3 bg-purple-50 rounded-lg border border-purple-200">
                                <div class="font-medium text-purple-900">N8N Workflows</div>
                                <div class="text-sm text-purple-700">Automatizaciones</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Panel Central - Configuraci√≥n de Entidad -->
                <div class="lg:col-span-2">
                    <div id="entityConfigPanel" class="bg-white rounded-xl shadow-sm border p-6 min-h-96">
                        <div class="text-center text-gray-500 py-12">
                            <div class="text-6xl mb-4">‚öôÔ∏è</div>
                            <h3 class="text-lg font-medium mb-2">Configurador de Entidades</h3>
                            <p>Selecciona una entidad de la lista para configurar sus campos, API y permisos</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal para Nueva Entidad -->
        <div id="newEntityModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
            <div class="bg-white rounded-xl p-6 max-w-md w-full mx-4">
                <h3 class="text-lg font-semibold mb-4">üìä Nueva Entidad</h3>
                <form onsubmit="saveNewEntity(event)">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Nombre de la Entidad</label>
                            <input type="text" id="newEntityName" class="w-full p-3 border rounded-lg" placeholder="ej: clientes, productos, facturas" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Descripci√≥n</label>
                            <textarea id="newEntityDescription" class="w-full p-3 border rounded-lg" rows="3" placeholder="Descripci√≥n de la entidad..."></textarea>
                        </div>
                        <div class="flex justify-end space-x-3">
                            <button type="button" onclick="closeNewEntityModal()" class="px-4 py-2 text-gray-600 hover:text-gray-800">
                                Cancelar
                            </button>
                            <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
                                Crear Entidad
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <script>
            // Estado global
            let currentBusiness = null;
            let currentEntity = null;
            let businessList = [];
            let entityConfigs = {};

            // URLs de la API - usar la misma base que el servidor actual
            const API_BASE = window.location.origin + '/api';

            // Inicializaci√≥n
            document.addEventListener('DOMContentLoaded', async () => {
                await loadBusinessList();
            });

            // [RESTO DEL C√ìDIGO JAVASCRIPT IGUAL QUE ANTES]
            // ================================
// GESTI√ìN DE BUSINESSES
// ================================

// Cargar lista de businesses
async function loadBusinessList() {
    try {
        console.log('Cargando businesses desde:', API_BASE + '/admin/businesses');
        const response = await fetch(`${API_BASE}/admin/businesses`);
        console.log('Response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('Businesses data:', data);
        
        // Manejar respuesta que puede tener formato {success: true, data: [...]}
        businessList = data.data || data;
        
        const select = document.getElementById('businessSelect');
        
        select.innerHTML = '<option value="">Selecciona un business...</option>';
        businessList.forEach(business => {
            const option = document.createElement('option');
            option.value = business.business_id;
            option.textContent = `${business.nombre} (${business.business_id})`;
            select.appendChild(option);
        });
        
        console.log(`Cargados ${businessList.length} businesses`);
        
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error cargando businesses: ' + error.message, 'error');
    }
}

// Cargar business seleccionado
async function loadBusiness() {
    const businessId = document.getElementById('businessSelect').value;
    if (!businessId) {
        document.getElementById('entitiesList').innerHTML = '<div class="text-gray-500 text-center py-4">Selecciona un business primero</div>';
        return;
    }

    currentBusiness = businessList.find(b => b.business_id === businessId);
    document.getElementById('businessName').textContent = currentBusiness?.nombre || businessId;

    await loadEntities(businessId);
}

// ================================
// GESTI√ìN DE ENTIDADES
// ================================

// Cargar entidades del business
async function loadEntities(businessId) {
    try {
        console.log('Cargando entidades para business:', businessId);
        const response = await fetch(`${API_BASE}/admin/entities/${businessId}`);
        console.log('Entities response status:', response.status);
        
        const entities = response.ok ? await response.json() : [];
        console.log('Entities data:', entities);
        
        const container = document.getElementById('entitiesList');
        
        if (entities.length === 0) {
            container.innerHTML = `
                <div class="text-gray-500 text-center py-4">
                    <div class="text-2xl mb-2">üìä</div>
                    <div>No hay entidades configuradas</div>
                    <button onclick="createNewEntity()" class="text-blue-600 hover:text-blue-800 mt-2">
                        Crear la primera entidad
                    </button>
                </div>
            `;
            return;
        }

        container.innerHTML = entities.map(entity => `
            <div class="entity-item p-3 border rounded-lg cursor-pointer hover:bg-gray-50"
                 onclick="selectEntity('${entity.entidad}')">
                <div class="font-medium">${entity.entidad}</div>
                <div class="text-sm text-gray-600">${entity.configuracion?.descripcion || 'Sin descripci√≥n'}</div>
                <div class="text-xs text-gray-500 mt-1">
                    ${entity.configuracion?.campos?.length || 0} campos configurados
                </div>
            </div>
        `).join('');

        // Cargar configuraciones en memoria
        entities.forEach(entity => {
            entityConfigs[entity.entidad] = entity;
        });

    } catch (error) {
        console.error('Error:', error);
        showNotification('Error cargando entidades: ' + error.message, 'error');
    }
}

// ================================
// MODAL PARA NUEVA ENTIDAD
// ================================

function createNewEntity() {
    if (!currentBusiness) {
        showNotification('Selecciona un business primero', 'warning');
        return;
    }
    document.getElementById('newEntityModal').classList.remove('hidden');
    document.getElementById('newEntityModal').classList.add('flex');
}

function closeNewEntityModal() {
    document.getElementById('newEntityModal').classList.add('hidden');
    document.getElementById('newEntityModal').classList.remove('flex');
    document.getElementById('newEntityName').value = '';
    document.getElementById('newEntityDescription').value = '';
}

async function saveNewEntity(event) {
    event.preventDefault();
    
    const name = document.getElementById('newEntityName').value.trim();
    const description = document.getElementById('newEntityDescription').value.trim();
    
    if (!name || !currentBusiness) return;

    try {
        const newEntity = {
            business_id: currentBusiness.business_id,
            entidad: name,
            configuracion: {
                descripcion: description,
                campos: [],
                api_config: null,
                crud_config: {
                    crear: { habilitado: true, roles: ['admin'] },
                    editar: { habilitado: true, roles: ['admin'] },
                    eliminar: { habilitado: false, roles: ['admin'] }
                }
            }
        };

        console.log('Creando entidad:', newEntity);

        const response = await fetch(`${API_BASE}/admin/entities/${currentBusiness.business_id}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(newEntity)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || 'Error creando entidad');
        }

        closeNewEntityModal();
        await loadEntities(currentBusiness.business_id);
        showNotification('Entidad creada exitosamente', 'success');
        
    } catch (error) {
        console.error('Error:', error);
        showNotification('Error creando entidad: ' + error.message, 'error');
    }
}

// ================================
// FUNCIONES AUXILIARES
// ================================

async function saveAllConfigs() {
    showNotification('Funcionalidad en desarrollo', 'info');
}

function showNotification(message, type = 'info') {
    const colors = {
        success: 'bg-green-100 border-green-300 text-green-800',
        error: 'bg-red-100 border-red-300 text-red-800',
        warning: 'bg-yellow-100 border-yellow-300 text-yellow-800',
        info: 'bg-blue-100 border-blue-300 text-blue-800'
    };

    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 p-4 rounded-lg border ${colors[type]} z-50 max-w-sm`;
    notification.textContent = message;

    document.body.appendChild(notification);

    setTimeout(() => {
        notification.remove();
    }, 4000);
}

console.log('Configurador de Entidades cargado correctamente');

            // ... (todo el c√≥digo JavaScript del configurador)
        </script>
    </body>
    </html>'''
    
    return HTMLResponse(content=html_content)

# ================================
# ENDPOINT PARA GESTI√ìN DE ENTIDADES DEL CONFIGURADOR
# ================================

from pydantic import BaseModel
from typing import Dict, Any, List, Optional

class EntityConfigRequest(BaseModel):
    """Request para configuraci√≥n de entidad"""
    business_id: str
    entidad: str
    configuracion: Dict[str, Any]

class CampoConfigRequest(BaseModel):
    """Request para configuraci√≥n de campo"""
    campo: str
    tipo: str
    obligatorio: bool = False
    visible_roles: List[str] = ["*"]
    editable_roles: List[str] = ["admin"]
    validacion: Optional[str] = None
    placeholder: Optional[str] = None
    descripcion: Optional[str] = None

@app.get("/api/admin/entities/{business_id}")
async def get_entities_config(business_id: str):
    """Obtener configuraciones de entidades para un business"""
    try:
        db = get_database()
        entities = await db.entities_config.find(
            {"business_id": business_id}
        ).to_list(None)
        
        # Convertir ObjectId a string
        for entity in entities:
            if "_id" in entity:
                entity["_id"] = str(entity["_id"])
        
        return entities
        
    except Exception as e:
        logger.error(f"Error obteniendo entidades: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/admin/entities/{business_id}")
async def create_entity_config(business_id: str, entity_config: EntityConfigRequest):
    """Crear nueva configuraci√≥n de entidad"""
    try:
        db = get_database()
        
        # Verificar si ya existe
        existing = await db.entities_config.find_one({
            "business_id": business_id,
            "entidad": entity_config.entidad
        })
        
        if existing:
            raise HTTPException(status_code=400, detail="La entidad ya existe")
        
        # Crear nueva configuraci√≥n
        entity_data = {
            "business_id": business_id,
            "entidad": entity_config.entidad,
            "configuracion": entity_config.configuracion,
            "created_at": datetime.utcnow(),
            "updated_at": datetime.utcnow()
        }
        
        result = await db.entities_config.insert_one(entity_data)
        entity_data["_id"] = str(result.inserted_id)
        
        logger.info(f"Entidad creada: {entity_config.entidad} para business {business_id}")
        return entity_data
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error creando entidad: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.put("/api/admin/entities/{business_id}/{entidad}")
async def update_entity_config(business_id: str, entidad: str, entity_config: EntityConfigRequest):
    """Actualizar configuraci√≥n de entidad"""
    try:
        db = get_database()
        
        update_data = {
            "configuracion": entity_config.configuracion,
            "updated_at": datetime.utcnow()
        }
        
        result = await db.entities_config.update_one(
            {"business_id": business_id, "entidad": entidad},
            {"$set": update_data}
        )
        
        if result.matched_count == 0:
            raise HTTPException(status_code=404, detail="Entidad no encontrada")
        
        logger.info(f"Entidad actualizada: {entidad} para business {business_id}")
        return {"message": "Entidad actualizada exitosamente"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error actualizando entidad: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.delete("/api/admin/entities/{business_id}/{entidad}")
async def delete_entity_config(business_id: str, entidad: str):
    """Eliminar configuraci√≥n de entidad"""
    try:
        db = get_database()
        
        result = await db.entities_config.delete_one({
            "business_id": business_id,
            "entidad": entidad
        })
        
        if result.deleted_count == 0:
            raise HTTPException(status_code=404, detail="Entidad no encontrada")
        
        logger.info(f"Entidad eliminada: {entidad} para business {business_id}")
        return {"message": "Entidad eliminada exitosamente"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error eliminando entidad: {e}")
        raise HTTPException(status_code=500, detail=str(e))
    # AGREGAR AL FINAL DE app/main.py (backend principal)

@app.get("/api/admin/entities/{business_id}")
async def get_entities_config_simple(business_id: str):
    """Endpoint simple para obtener configuraciones de entidades"""
    try:
        db = get_database()
        
        # Obtener todas las entidades configuradas para el business
        entities = await db.entities_config.find(
            {"business_id": business_id, "activa": True}
        ).to_list(None)
        
        return {"success": True, "data": entities}
        
    except Exception as e:
        logger.error(f"Error obteniendo entidades: {e}")
        return {"success": False, "error": str(e), "data": []}
# ================================
# ENDPOINTS CRUD SIMPLIFICADOS - AGREGAR AL FINAL DE app/main.py
# ================================

@app.get("/api/admin/entities/{business_id}")
async def get_entities_simple(business_id: str):
    """Endpoint simple para obtener configuraciones de entidades"""
    try:
        logger.info(f"üîç Solicitando entidades para: {business_id}")
        
        # Datos mock mientras se configura MongoDB
        mock_entities = [
            {
                "business_id": business_id,
                "entidad": "clientes",
                "descripcion": "Gesti√≥n de clientes",
                "configuracion": {
                    "campos": [
                        {
                            "campo": "id",
                            "nombre": "ID",
                            "tipo": "number",
                            "mostrar_en_tabla": True
                        },
                        {
                            "campo": "nombre",
                            "nombre": "Nombre Completo",
                            "tipo": "text",
                            "obligatorio": True,
                            "mostrar_en_tabla": True,
                            "placeholder": "Ej: Juan P√©rez"
                        },
                        {
                            "campo": "email",
                            "nombre": "Email",
                            "tipo": "email",
                            "obligatorio": True,
                            "mostrar_en_tabla": True,
                            "placeholder": "ejemplo@email.com"
                        },
                        {
                            "campo": "telefono",
                            "nombre": "Tel√©fono",
                            "tipo": "phone",
                            "obligatorio": True,
                            "mostrar_en_tabla": True,
                            "placeholder": "+54 11 1234-5678"
                        },
                        {
                            "campo": "estado",
                            "nombre": "Estado",
                            "tipo": "select",
                            "obligatorio": True,
                            "mostrar_en_tabla": True,
                            "opciones": [
                                {"valor": "activo", "label": "Activo"},
                                {"valor": "inactivo", "label": "Inactivo"},
                                {"valor": "suspendido", "label": "Suspendido"}
                            ]
                        },
                        {
                            "campo": "fecha_alta",
                            "nombre": "Fecha de Alta",
                            "tipo": "date",
                            "mostrar_en_tabla": True
                        }
                    ]
                },
                "activa": True
            },
            {
                "business_id": business_id,
                "entidad": "tickets",
                "descripcion": "Sistema de tickets",
                "configuracion": {
                    "campos": [
                        {
                            "campo": "id",
                            "nombre": "ID",
                            "tipo": "number",
                            "mostrar_en_tabla": True
                        },
                        {
                            "campo": "titulo",
                            "nombre": "T√≠tulo",
                            "tipo": "text",
                            "obligatorio": True,
                            "mostrar_en_tabla": True
                        },
                        {
                            "campo": "estado",
                            "nombre": "Estado",
                            "tipo": "select",
                            "obligatorio": True,
                            "mostrar_en_tabla": True,
                            "opciones": [
                                {"valor": "abierto", "label": "Abierto"},
                                {"valor": "en_progreso", "label": "En Progreso"},
                                {"valor": "resuelto", "label": "Resuelto"},
                                {"valor": "cerrado", "label": "Cerrado"}
                            ]
                        },
                        {
                            "campo": "prioridad",
                            "nombre": "Prioridad",
                            "tipo": "select",
                            "mostrar_en_tabla": True,
                            "opciones": [
                                {"valor": "baja", "label": "Baja"},
                                {"valor": "media", "label": "Media"},
                                {"valor": "alta", "label": "Alta"},
                                {"valor": "critica", "label": "Cr√≠tica"}
                            ]
                        }
                    ]
                },
                "activa": True
            }
        ]
        
        logger.info(f"‚úÖ Retornando {len(mock_entities)} entidades mock")
        return {"success": True, "data": mock_entities}
        
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        return {"success": False, "error": str(e), "data": []}

@app.get("/api/business/entities/{business_id}/{entity_name}")
async def get_entity_data_simple(
    business_id: str,
    entity_name: str,
    page: int = 1,
    per_page: int = 10
):
    """Datos mock para testing"""
    try:
        logger.info(f"üîç Datos solicitados: {entity_name} para {business_id}")
        
        # Datos mock
        mock_data = {
            "clientes": [
                {
                    "id": 1,
                    "nombre": "Juan P√©rez",
                    "email": "juan@clinica.com",
                    "telefono": "+54 11 1234-5678",
                    "estado": "activo",
                    "fecha_alta": "2024-01-15"
                },
                {
                    "id": 2,
                    "nombre": "Mar√≠a Garc√≠a",
                    "email": "maria@clinica.com",
                    "telefono": "+54 11 8765-4321",
                    "estado": "activo",
                    "fecha_alta": "2024-02-20"
                },
                {
                    "id": 3,
                    "nombre": "Carlos L√≥pez",
                    "email": "carlos@clinica.com",
                    "telefono": "+54 11 5555-0000",
                    "estado": "suspendido",
                    "fecha_alta": "2024-01-10"
                },
                {
                    "id": 4,
                    "nombre": "Ana Mart√≠nez",
                    "email": "ana@clinica.com",
                    "telefono": "+54 11 9999-1111",
                    "estado": "activo",
                    "fecha_alta": "2023-12-05"
                },
                {
                    "id": 5,
                    "nombre": "Roberto Silva",
                    "email": "roberto@clinica.com",
                    "telefono": "+54 11 7777-2222",
                    "estado": "activo",
                    "fecha_alta": "2024-03-01"
                }
            ],
            "tickets": [
                {
                    "id": 1,
                    "titulo": "Consulta sobre horarios",
                    "estado": "abierto",
                    "prioridad": "media",
                    "fecha_creacion": "2024-01-20"
                },
                {
                    "id": 2,
                    "titulo": "Problema con la cita",
                    "estado": "resuelto",
                    "prioridad": "alta",
                    "fecha_creacion": "2024-01-18"
                },
                {
                    "id": 3,
                    "titulo": "Solicitud de informe",
                    "estado": "en_progreso",
                    "prioridad": "baja",
                    "fecha_creacion": "2024-01-22"
                }
            ]
        }
        
        entity_data = mock_data.get(entity_name, [])
        total = len(entity_data)
        
        # Simular paginaci√≥n
        start = (page - 1) * per_page
        end = start + per_page
        items = entity_data[start:end]
        
        result = {
            "success": True,
            "data": {
                "items": items,
                "total": total,
                "page": page,
                "per_page": per_page,
                "total_pages": (total + per_page - 1) // per_page
            }
        }
        
        logger.info(f"‚úÖ Retornando {len(items)}/{total} items de {entity_name}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/business/entities/{business_id}/{entity_name}")
async def create_entity_simple(
    business_id: str,
    entity_name: str,
    item_data: dict
):
    """Simular creaci√≥n de entidad"""
    logger.info(f"‚úÖ Simulando creaci√≥n en {entity_name}: {item_data}")
    
    # Simular creaci√≥n exitosa
    item_data["id"] = 999  # ID simulado
    item_data["created_at"] = datetime.now().isoformat()
    
    return {
        "success": True,
        "data": item_data,
        "message": "Item creado exitosamente (simulado)"
    }

@app.put("/api/business/entities/{business_id}/{entity_name}/{item_id}")
async def update_entity_simple(
    business_id: str,
    entity_name: str,
    item_id: str,
    item_data: dict
):
    """Simular actualizaci√≥n"""
    logger.info(f"‚úÖ Simulando actualizaci√≥n {entity_name}/{item_id}: {item_data}")
    
    item_data["id"] = int(item_id)
    item_data["updated_at"] = datetime.now().isoformat()
    
    return {
        "success": True,
        "data": item_data,
        "message": "Item actualizado exitosamente (simulado)"
    }

@app.delete("/api/business/entities/{business_id}/{entity_name}/{item_id}")
async def delete_entity_simple(
    business_id: str,
    entity_name: str,
    item_id: str
):
    """Simular eliminaci√≥n"""
    logger.info(f"‚úÖ Simulando eliminaci√≥n {entity_name}/{item_id}")
    
    return {
        "success": True,
        "data": {"deleted": True},
        "message": "Item eliminado exitosamente (simulado)"
    }