#!/usr/bin/env python3
"""
üö® SCRIPT DE LIMPIEZA DE EMERGENCIA
Ejecutar para encontrar y comentar rutas problem√°ticas autom√°ticamente
"""

import os
import shutil
from pathlib import Path

def backup_main_py():
    """Crear backup del main.py antes de modificar"""
    if os.path.exists("app/main.py"):
        shutil.copy2("app/main.py", "app/main.py.backup")
        print("‚úÖ Backup creado: app/main.py.backup")

def clean_main_py():
    """Limpiar rutas problem√°ticas de main.py"""
    
    if not os.path.exists("app/main.py"):
        print("‚ùå No se encuentra app/main.py")
        return False
    
    # Leer el archivo
    with open("app/main.py", "r", encoding="utf-8") as f:
        lines = f.readlines()
    
    # L√≠neas problem√°ticas a comentar
    problematic_patterns = [
        "@app.get(\"/admin",
        "async def admin_",
        "async def redirect_to_admin",
        "from .frontend.routers.admin",
        "admin_frontend_router",
        "RedirectResponse(url=\"/admin\"",
        "templates = Jinja2Templates(directory=\"app/frontend/templates\")",  # Si est√° duplicado
    ]
    
    cleaned_lines = []
    changes_made = 0
    
    for i, line in enumerate(lines):
        line_stripped = line.strip()
        should_comment = False
        
        # Verificar si la l√≠nea contiene patrones problem√°ticos
        for pattern in problematic_patterns:
            if pattern in line and not line_stripped.startswith("#"):
                should_comment = True
                break
        
        if should_comment:
            # Comentar la l√≠nea
            if line.startswith("    "):  # Conservar indentaci√≥n
                cleaned_lines.append("    # " + line[4:])
            elif line.startswith("\t"):
                cleaned_lines.append("\t# " + line[1:])
            else:
                cleaned_lines.append("# " + line)
            changes_made += 1
            print(f"üîß Comentada l√≠nea {i+1}: {line_stripped[:50]}...")
        else:
            cleaned_lines.append(line)
    
    # Escribir archivo limpio
    with open("app/main.py", "w", encoding="utf-8") as f:
        f.writelines(cleaned_lines)
    
    print(f"‚úÖ {changes_made} l√≠neas comentadas en main.py")
    return changes_made > 0

def remove_problematic_files():
    """Eliminar archivos problem√°ticos"""
    files_to_remove = [
        "app/frontend/routers/admin.py",
        "app/frontend/templates/admin",
    ]
    
    for file_path in files_to_remove:
        try:
            if os.path.isfile(file_path):
                os.remove(file_path)
                print(f"‚úÖ Eliminado archivo: {file_path}")
            elif os.path.isdir(file_path):
                shutil.rmtree(file_path)
                print(f"‚úÖ Eliminado directorio: {file_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo eliminar {file_path}: {e}")

def verify_main_py():
    """Verificar que main.py no tiene l√≠neas problem√°ticas"""
    
    if not os.path.exists("app/main.py"):
        return False
    
    with open("app/main.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    # Buscar patrones problem√°ticos no comentados
    problematic_active = []
    
    lines = content.split('\n')
    for i, line in enumerate(lines, 1):
        line_stripped = line.strip()
        if (line_stripped.startswith('@app.get("/admin') and 
            not line_stripped.startswith('#')):
            problematic_active.append(f"L√≠nea {i}: {line_stripped}")
        
        if (line_stripped.startswith('async def admin_') and 
            not line_stripped.startswith('#')):
            problematic_active.append(f"L√≠nea {i}: {line_stripped}")
        
        if ('admin_frontend_router' in line_stripped and 
            not line_stripped.startswith('#')):
            problematic_active.append(f"L√≠nea {i}: {line_stripped}")
    
    if problematic_active:
        print("‚ùå A√∫n hay l√≠neas problem√°ticas:")
        for line in problematic_active:
            print(f"   {line}")
        return False
    else:
        print("‚úÖ No se encontraron l√≠neas problem√°ticas activas")
        return True

def main():
    """Funci√≥n principal de limpieza"""
    print("üö® LIMPIEZA DE EMERGENCIA DEL BACKEND")
    print("=" * 50)
    
    # 1. Crear backup
    backup_main_py()
    
    # 2. Eliminar archivos problem√°ticos
    print("\nüìÅ Eliminando archivos problem√°ticos...")
    remove_problematic_files()
    
    # 3. Limpiar main.py
    print("\nüßπ Limpiando main.py...")
    if clean_main_py():
        print("‚úÖ main.py limpiado exitosamente")
    else:
        print("‚ö†Ô∏è No se realizaron cambios en main.py")
    
    # 4. Verificar resultado
    print("\nüîç Verificando resultado...")
    if verify_main_py():
        print("‚úÖ Limpieza completada exitosamente")
        print("\nüöÄ PR√ìXIMOS PASOS:")
        print("1. Ejecutar: python run.py")
        print("2. Verificar: curl http://localhost:8000/health")
        print("3. Si funciona, proceder con los templates")
    else:
        print("‚ùå A√∫n hay problemas. Revisar manualmente main.py")
        print("\nüîß SOLUCI√ìN MANUAL:")
        print("Abrir app/main.py y comentar TODAS las l√≠neas que contengan:")
        print("- @app.get(\"/admin")
        print("- async def admin_")
        print("- admin_frontend_router")
        print("- RedirectResponse(url=\"/admin\"")
    
    print(f"\nüíæ Backup guardado en: app/main.py.backup")

if __name__ == "__main__":
    main()